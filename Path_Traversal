Path traversal is also known as directory traversal. These vulnerabilities enable an attacker to read arbitrary files on the server that is running an application. 
Lets say this is the url 
<img src="/loadImage?filename=218.png">
 The loadImage URL takes a filename parameter and returns the contents of the specified file. The image files are stored on disk in the location /var/www/images/. To return an image, the application appends the requested filename to this base directory and uses a filesystem API to read the contents of the file. In other words, the application reads from the following file path:
/var/www/images/218.pnghttps://insecure-website.com/loadImage?filename=../../../etc/passwd
This causes the application to read from the following file path:
/var/www/images/../../../etc/passwd

# Common obstacles to exploiting path traversal vulnerabilities
Many applications that place user input into file paths implement defenses against path traversal attacks. These can often be bypassed.
1. You might be able to use an absolute path from the filesystem root, such as filename=/etc/passwd, to directly reference a file without using any traversal sequences.
2. You might be able to use nested traversal sequences, such as ....// or ....\/. These revert to simple traversal sequences when the inner sequence is stripped.
3. Web servers may strip any directory traversal sequences before passing your input to the application. You can sometimes bypass this kind of sanitization by URL encoding, or even double URL encoding, the ../ characters. This results in %2e%2e%2f and %252e%252e%252f respectively. 
eg: ..%252f..%252f..%252f → ..%2f..%2f..%2f → ../../..
4. An application may require the user-supplied filename to start with the expected base folder, such as /var/www/images. We might to include the required base folder followed by suitable traversal sequences. For example: filename=/var/www/images/../../../etc/passwd.
5. An application may require the user-supplied filename to end with an expected file extension, such as .png. In this case, it might be possible to use a null byte to effectively terminate the file path before the required extension. For example: filename=../../../etc/passwd%00.png.
%00 is a URL-encoded representation of the null byte 

# Mitigations 
1. Input Validation and Sanitization
Reject input with ../, ..%2f, %2e%2e/, etc. — including double-encoded forms.
Remove or neutralize characters like: .., /, \, %2e, %2f, %5c
Use a whitelist of acceptable file names and extensions (e.g., .jpg, .pdf only).
2. Use Safe APIs
Use platform/framework functions that automatically sanitize paths.
For example:
- In Python: os.path.abspath() + compare to base dir
- In Java: File.getCanonicalPath()
3. Restrict File Access
Enforce access to only specific directories (e.g., /uploads/, /static/) and block absolute paths (/etc/passwd).

